(2.1)(COMBINADOR DE PUNTO FIJO INTERNO)###############################################################
letrec next : Nat -> Nat =
    lambda n : Nat. succ n
in next 0;;

(SUMA)
letrec sum : Nat -> Nat -> Nat = 
    lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m)
in sum 21 34;;

(PRODUCTO)
letrec sum : Nat -> Nat -> Nat =
    lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m)
in
letrec prod : Nat -> Nat -> Nat =
    lambda n : Nat. lambda m : Nat. if iszero m then 0 else sum n (prod n (pred m)) in 
prod 12 5;;

(FIBONACCI)
letrec sum : Nat -> Nat -> Nat =
    lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m)
in
letrec fib : Nat -> Nat =
    lambda n : Nat. if iszero n then 0 else if iszero (pred n) then 1 else sum (fib (pred n)) (fib (pred (pred n)))
in fib 7;;

(FACTORIAL)
letrec sum : Nat -> Nat -> Nat =
    lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m)
in
letrec prod : Nat -> Nat -> Nat =
    lambda n : Nat. lambda m : Nat. if iszero m then 0 else sum n (prod n (pred m))
in
letrec fac : Nat -> Nat =
    lambda n : Nat. if iszero n then 1 else prod n (fac (pred n))
in fac 3;; 


(2.2)(CONTEXTO DE DEFINICIONES GLOBALES)##########################################
x = true;;
id = lambda x : Bool. x;;
id x;;

fib = letrec sum : Nat -> Nat -> Nat =
    lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m)
in
letrec fib : Nat -> Nat =
    lambda n : Nat. if iszero n then 0 else if iszero (pred n) then 1 else sum (fib (pred n)) (fib (pred (pred n)))
in fib;;
fib 7;;


(2.3)(STRING)#####################################################################
"";;

"abc";;

concat "para" "sol";;

concat (concat "para" "sol") "es";;

lambda s : String. s;;

(lambda s : String. s) "abc" ;;

letrec replicate : String -> Nat -> String =
    lambda s : String. lambda n : Nat.
        if iszero n then "" else concat s (replicate s (pred n))
in replicate "abc" 3;;


(2.4)(TUPLES)##################################################################
{1,2};;
t = {{true, 2}, {letrec next : Nat -> Nat = lambda n : Nat. succ n in next, "abc"}};;
t.1;;
t.1.2;;
t.2.1 0;;


(2.5)(RECORDS)###############################################################
{cost=30,partno=5524};;
r = {texto="equis", num={x=1,y=2}, flag=true};;
r.texto;;
r.num;;
r.num.x;;


(ASCRIPTION)###################################################################
1 as Nat;;
1 as Bool;;  (*Falla*)

(2.7)(VARIANTS)###############################################################

Int = <pos:Nat, zero:Bool, neg:Nat>;;
p3 = <pos=3> as Int;;
z0 = <zero=true> as Int;;
n5 = <neg=5> as Int;;
p3 = <pos=3> as <pos:Nat, zero:Bool, neg:Nat>;;
z0 = <zero=true> as <pos:Nat, zero:Bool, neg:Nat>;;
n5 = <neg=5> as <pos:Nat, zero:Bool, neg:Nat>;;
